name: Build Packages

on:
  push:
    paths-ignore:
    - 'doc/**/'
    - '**.md'
    - 'appveyor.yml'
    - '.travis.yml'
  pull_request:
    paths-ignore:
    - 'doc/**/'
    - '**.md'
    - 'appveyor.yml'
    - '.travis.yml'

env:
  # General shared directories
  BUILD_DIR: "build"
  CCACHE_DIR: "ccache"
  DEPS_DIR: "deps"
  PREFIX_DIR: "prefix"
  SOURCE_DIR: "source"
  SYSROOT_DIR: "sysroot"

  # General Shared Scripts
  DEPS_AFT: 'cross/build/source/prepare-apt-sources-after.sh'
  DEPS_PREP: 'cross/build/source/prepare-apt-sources-init.sh'
  DEPS_SCRIPT: 'cross/build/source/dependencies.sh'
  BSD_DEPS_SCRIPT: 'cross/build/freebsd/dependencies.sh'
  JSON_PREP: 'cross/build/linux/prepare-json-payload.sh'
  JSON_SCRIPT: 'cross/build/linux/get-json-value.sh'
  LLVM_BUILD_SCRIPT: 'cross/build/linux/source-llvm-build-vars.sh'
  LLVM_STATIC_SCRIPT: 'cross/build/linux/get-llvm-static-libs.sh'
  LLVM_UA_SCRIPT: 'cross/build/linux/update-alternatives-llvm.sh'

  # General Shared Hash Files
  CCACHE_HASH_SOURCE: "ccache-hits.txt"
  DEPS_HASH_SOURCE: "dependencies.sh"
  PAYLOAD_HASH_SOURCE: 'payload.json'
  SOURCE_HASH_SOURCE: "patch.sh"

  # Compiler variables
  CLANG_VERSION: "17"
  C_STANDARD_VERSION: "c17"
  CXX_STANDARD_VERSION: "c++17"
  GCC_VERSION: "12"

jobs:
  define:
    name: Define Matrix
    runs-on: ubuntu-22.04

    outputs:
      platforms: ${{ steps.platforms.outputs.platforms }}
      sources: ${{ steps.sources.outputs.sources }}
      deps: ${{ steps.deps.outputs.deps }}
      builds: ${{ steps.builds.outputs.builds }}
      stages: ${{ steps.stages.outputs.stages }}

    steps:
    - name: Define Platforms
      id: platforms
      run: >-
        echo "platforms=[ \
          'linux', \
          'freebsd' \
        ]" >> "$GITHUB_OUTPUT"

    - name: Define Deps
      id: deps
      run: >-
        echo "deps=[ \
          'shared', \
          'thirdparty' \
        ]" >> "$GITHUB_OUTPUT"

    - name: Define Source
      id: sources
      run: >-
        echo "sources=[ \
          'thirdparty' \
        ]" >> "$GITHUB_OUTPUT"

    - name: Define Builds
      id: builds
      run: >-
        echo "builds=[ \
          'static', \
          'dynamic' \
        ]" >> "$GITHUB_OUTPUT"

    - name: Define Stages
      id: stages
      run: >-
        echo "stages=[ \
          'prepare', \
          'build', \
          'sysroot', \
          'engine' \
        ]" >> "$GITHUB_OUTPUT"

  matrix:
    name: Prepare Stage Matrices
    runs-on: ubuntu-22.04
    needs: [define]

    strategy:
      matrix:
        stage: ${{ fromJSON(needs.define.outputs.stages) }}
        build: ${{ fromJSON(needs.define.outputs.builds) }}

    env:
      SETUP_MATRIX_DIR: '_actions/druzsan/setup-matrix/v2'
      SETUP_MATRIX_KEY: 'setup-matrix-python-cache'

    outputs:
      matrix_prepare: ${{ steps.prepare.outputs.matrix }}
      matrix_prepare_static_deps: ${{ steps.prepare_static_deps.outputs.matrix }}
      matrix_sysroot: ${{ steps.sysroot.outputs.matrix }}
      matrix_build: ${{ steps.build.outputs.matrix }}
      matrix_build_static_deps: ${{ steps.build_static_deps.outputs.matrix }}
      matrix_build_static: ${{ steps.build_static.outputs.matrix }}
      matrix_build_dynamic: ${{ steps.build_dynamic.outputs.matrix }}

    steps:
    - name: Checkout repository
      id: checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        path: 'cross'

    # Create all of the main matrices required here
    - name: Checkout setup-matrix
      id: matrix
      uses: actions/checkout@v4
      with:
        repository: 'druzsan/setup-matrix'
        submodules: recursive
        path: '${{ env.SETUP_MATRIX_DIR }}'
        ref: 'v2'

    - name: Load Python Cache
      id: load
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ env.SETUP_MATRIX_DIR }}/.venv
          ${{ env.SETUP_MATRIX_DIR }}/Pipfile
          ${{ env.SETUP_MATRIX_DIR }}/Pipfile.lock
          ${{ env.SETUP_MATRIX_DIR }}/get-pipenv.py
        key: |
          ${{ env.SETUP_MATRIX_KEY }}

    - name: Install Pipenv
      id: pipenv
      if: |
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE
        export PIPENV_VENV_IN_PROJECT=1
        
        cd ${{ env.SETUP_MATRIX_DIR }}

        # Grab pipenv install script to be passed down to Dockerfile too
        curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py > get-pipenv.py
        python3 get-pipenv.py

        pipenv install
        pipenv install pyyaml pipenv
        pipenv run pipenv --version

    - name: Prepare setup-matrix
      id: setup
      env:
        DOCKER_NAME: 'setup-matrix'
      run: |
        export TLD=$GITHUB_WORKSPACE

        cd ${{ env.SETUP_MATRIX_DIR }}

        #sudo find /usr -type f -name "*crt*.o" -prune -exec du -h '{}' \;

        # Patch Dockerfile so that it uses the cache and pipenv
        patch -p1 -i $TLD/cross/patches/workflows/setup-matrix-github-actions-fix.patch

        docker build . -t ${{ env.DOCKER_NAME }}

        cd $TLD

    - name: Prepare ${{ matrix.stage }} Matrix
      id: prepare
      if: |
        matrix.stage == 'prepare'
      uses: ./_actions/druzsan/setup-matrix/v2
      with:
        matrix: |
          dep:
            - shared
            - thirdparty
          include:
            - source: thirdparty
            - stage: prepare

    - name: Prepare ${{ matrix.stage }} Matrix
      id: sysroot
      if: |
        matrix.stage == 'sysroot'
      uses: ./_actions/druzsan/setup-matrix/v2
      with:
        matrix: |
          version:
            - 14.1
            - 14.0
            - 13.3
          include:
            - stage: sysroot
              platform: freebsd
              shared: shared
              binutils: '2.43.1'
              gcc: '13.3.0'
              isl: '0.24'
              gmp: '6.3.0'
              mpc: '1.3.1'
              mpfr: '4.2.1'
              musl: '1.2.5'

    - name: Prepare ${{ matrix.stage }} Matrix
      id: build
      if: |
        matrix.stage == 'build'
      uses: ./_actions/druzsan/setup-matrix/v2
      with:
        matrix: |
          include:
            - platform: linux
              version: 22.04
              build: static
              dep: shared
              source: thirdparty
              stage: build
            - platform: linux
              version: 22.04
              build: dynamic
              dep: shared
              source: thirdparty
              stage: build
            - platform: freebsd
              version: 14.1
              build: static
              dep: shared
              source: thirdparty
              stage: build
            - platform: freebsd
              version: 14.1
              build: dynamic
              dep: shared
              source: thirdparty
              stage: build
            - platform: freebsd
              version: 14.0
              build: static
              dep: shared
              source: thirdparty
              stage: build
            - platform: freebsd
              version: 14.0
              build: dynamic
              dep: shared
              source: thirdparty
              stage: build
            - platform: freebsd
              version: 13.3
              build: static
              dep: shared
              source: thirdparty
              stage: build
            - platform: freebsd
              version: 13.3
              build: dynamic
              dep: shared
              source: thirdparty
              stage: build

    # Will add FreeBSD back to this once I get the sysroot stuff working properly again
    - name: Prepare ${{ matrix.stage }} ${{ matrix.build }} Dependencies Matrix
      id: build_static_deps
      if: |
        matrix.build == 'static' &&
        matrix.stage == 'build'
      uses: ./_actions/druzsan/setup-matrix/v2
      with:
        matrix: |
          include:
            - platform: linux
              version: 22.04
              dep: thirdparty
              source: thirdparty
              shared: shared
              build: static
              stage: build
            - platform: freebsd
              version: 14.1
              dep: thirdparty
              source: thirdparty
              shared: shared
              build: static
              stage: build
            - platform: freebsd
              version: 14.0
              dep: thirdparty
              source: thirdparty
              shared: shared
              build: static
              stage: build
            - platform: freebsd
              version: 13.3
              dep: thirdparty
              source: thirdparty
              shared: shared
              build: static
              stage: build

    - name: Prepare ${{ matrix.stage }} ${{ matrix.build }} Matrix
      id: build_static
      if: |
        matrix.build == 'static' &&
        matrix.stage == 'build'
      uses: ./_actions/druzsan/setup-matrix/v2
      with:
        matrix: |
          include:
            - platform: linux
              version: 22.04
              dep: shared
              link: thirdparty
              build: static
              stage: build
            - platform: freebsd
              version: 14.1
              dep: shared
              link: thirdparty
              build: static
              stage: build
            - platform: freebsd
              version: 14.0
              dep: shared
              link: thirdparty
              build: static
              stage: build
            - platform: freebsd
              version: 13.3
              dep: shared
              link: thirdparty
              build: static
              stage: build

    - name: Prepare ${{ matrix.stage }} ${{ matrix.build }} Matrix
      id: build_dynamic
      if: |
        matrix.build == 'dynamic' &&
        matrix.stage == 'build'
      uses: ./_actions/druzsan/setup-matrix/v2
      with:
        matrix: |
          include:
            - platform: linux
              version: 22.04
              dep: shared
              link: static
              build: dynamic
              stage: build
            - platform: freebsd
              version: 14.1
              dep: shared
              link: static
              build: dynamic
              stage: build
            - platform: freebsd
              version: 14.0
              dep: shared
              link: static
              build: dynamic
              stage: build
            - platform: freebsd
              version: 13.3
              dep: shared
              link: static
              build: dynamic
              stage: build

    - name: Prepare ${{ matrix.stage }} Matrix
      id: cross
      if: matrix.stage == 'cross'
      uses: ./_actions/druzsan/setup-matrix/v2
      with:
        matrix: |
          include:
            - platform: linux
              version: 22.04
              link: dynamic
              stage: cross
            - platform: freebsd
              version: 14.1
              link: dynamic
              stage: cross
            - platform: freebsd
              version: 14.0
              stage: cross
            - platform: freebsd
              version: 13.3
              link: dynamic
              stage: cross

    - name: Cache Python
      id: pycache
      if: |
        steps.load.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ env.SETUP_MATRIX_DIR }}/.venv
          ${{ env.SETUP_MATRIX_DIR }}/Pipfile
          ${{ env.SETUP_MATRIX_DIR }}/Pipfile.lock
          ${{ env.SETUP_MATRIX_DIR }}/get-pipenv.py
        key: |
          ${{ env.SETUP_MATRIX_KEY }}

  deps:
    name: Prepare Dependencies
    runs-on: ubuntu-22.04
    needs: [define]

    strategy:
      matrix:
        dep: ${{ fromJSON(needs.define.outputs.deps) }}

    outputs:
      deps_dir_shared: ${{ steps.define.outputs.deps_dir_shared }}
      deps_dir_thirdparty: ${{ steps.define.outputs.deps_dir_thirdparty }}

      deps_key_shared: ${{ steps.define.outputs.deps_key_shared }}
      deps_key_thirdparty: ${{ steps.define.outputs.deps_key_thirdparty }}

      deps_hash: ${{ steps.define.outputs.deps_hash }}

    steps:
    - name: Checkout repository
      id: checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        path: 'cross'

    - name: Define Outputs
      id: define
      env:
        DEPS_DIR: "${{ env.DEPS_DIR }}/${{ matrix.dep }}"
      run: |
        mkdir -pv ${{ env.DEPS_DIR }}
        cp -rfv cross/build/source/${{ env.DEPS_HASH_SOURCE }} ${{ env.DEPS_DIR }}

        export DEPS_HASH=${{ hashFiles(format('**/source/{0}', env.DEPS_HASH_SOURCE)) }}
        export DEPS_KEY="${{ matrix.dep }}-deps-$DEPS_HASH"

        echo 'deps_dir_${{ matrix.dep }}=${{ env.DEPS_DIR }}' >> "$GITHUB_OUTPUT"
        echo "deps_key_${{ matrix.dep }}=$DEPS_KEY" >> "$GITHUB_OUTPUT"

        # This outputs locally for sanity while the other outputs for other jobs
        echo 'deps_dir=${{ env.DEPS_DIR }}' >> "$GITHUB_OUTPUT"
        echo "deps_key=$DEPS_KEY" >> "$GITHUB_OUTPUT"

        echo "deps_hash=$DEPS_HASH" >> "$GITHUB_OUTPUT"

    - name: Load ${{ matrix.dep }} Dependencies Cache
      id: load
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ steps.define.outputs.deps_dir }}
        key: ${{ steps.define.outputs.deps_key }}
        lookup-only: true

    - name: Prepare Apt Sources
      id: apt
      if: |
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE
        export CLANG_VERSION=${{ env.CLANG_VERSION }}
        export DEPS_DIR=${{ steps.define.outputs.deps_dir }}

        cd $TLD
        bash ${{ env.DEPS_PREP }}

        mkdir -pv $DEPS_DIR

    - name: Download ${{ matrix.dep }} Dependencies
      id: download
      if: |
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE
        export CLANG_VERSION=${{ env.CLANG_VERSION }}
        export DEPS_DIR=${{ steps.define.outputs.deps_dir }}

        sudo apt-get update
        cd $TLD/$DEPS_DIR
        source $TLD/${{ env.DEPS_SCRIPT }}
        bash $TLD/cross/build/source/download-${{ matrix.dep }}-deps.sh
        cd $TLD

    - name: Prepare ${{ matrix.dep }} Dependencies cache
      id: prepare
      if: |
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE
        export DEPS_DIR=${{ steps.define.outputs.deps_dir }}

        cd $TLD
        eval $(apt-config shell CACHE Dir::Cache)
        eval $(apt-config shell ARCHIVES Dir::Cache::archives)
        sudo cp -rfv /${CACHE}/${ARCHIVES}/*.deb $TLD/$DEPS_DIR

        sudo cp -rfv /etc/apt/sources* $DEPS_DIR
        sudo cp -rfv /etc/apt/trusted* $DEPS_DIR

    - name: Cache ${{ matrix.dep }} Dependencies
      id: cache
      if: |
        steps.load.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ steps.define.outputs.deps_dir }}
        key: ${{ steps.define.outputs.deps_key }}

  source:
    name: Prepare Source
    needs: [define]
    runs-on: ubuntu-22.04

    # description: 'Download, patch and prepare dependencies needed for cross-compilation chain'

    strategy:
      matrix:
        source: ${{ fromJSON(needs.define.outputs.sources) }}
        include:
          - glfw: '3.4'
            bimg: 'master'
            bx: 'master'
            bgfx: 'master'
            genie: 'master'
            mimalloc: 'v2.1.7'
            soloud: 'master'

    outputs:
      source_dir_thirdparty: ${{ steps.link.outputs.source_dir_thirdparty }}

      source_key_thirdparty: ${{ steps.define.outputs.source_key_thirdparty }}

      source_hash: ${{ steps.define.outputs.source_hash }}

    steps:
    - name: Checkout repository
      id: checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        path: 'cross'

    - name: Define Outputs
      id: define
      run: |
        mkdir -pv ${{ env.SOURCE_DIR }}

        # Grab the source patches and use them for the hash since source won't change much
        # Use an alternative sum for the hashing due to patches causing hashFiles issue
        export SOURCE_HASH=$(find $TLD/cross/patches/source -type f -name "*.patch" -prune -exec cat -s '{}' \; | tr '\n' ' ' | sha256sum | cut -d '-' -f1 | tr -d " \t\n\r")
        
        export SOURCE_KEY="${{ matrix.source }}-source-$SOURCE_HASH"

        echo "source_key_${{ matrix.source }}=$SOURCE_KEY" >> "$GITHUB_OUTPUT"
        
        # See deps.define for why I'm doing this
        echo "source_key=$SOURCE_KEY" >> "$GITHUB_OUTPUT"

        echo "source_hash=$SOURCE_HASH" >> "$GITHUB_OUTPUT"

    - name: Link Versions to Source
      id: link
      run: |
        echo 'source=${{ matrix.source }}' >> "$GITHUB_OUTPUT"
        echo 'source_dir_${{ matrix.source }}=${{ env.SOURCE_DIR }}/${{ matrix.source }}' >> "$GITHUB_OUTPUT"
        echo 'source_dir=${{ env.SOURCE_DIR }}/${{ matrix.source }}' >> "$GITHUB_OUTPUT"

    - name: Load ${{ matrix.source }} Source cache
      id: load
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ steps.link.outputs.source_dir }}
        key: ${{ steps.define.outputs.source_key }}
        lookup-only: true

    - name: Checkout ${{ matrix.source }} from git
      id: thirdparty
      if: |
        steps.load.outputs.cache-hit != 'true' &&
        matrix.source == 'thirdparty'
      run: |
        mkdir -pv ${{ steps.link.outputs.source_dir }}
        cd ${{ steps.link.outputs.source_dir }}

        # BGFX
        git clone --recursive --branch ${{ matrix.bimg }} --depth 1 https://github.com/bkaradzic/bimg.git bimg
        git clone --recursive --branch ${{ matrix.bx }} --depth 1 https://github.com/bkaradzic/bx.git bx
        git clone --recursive --branch ${{ matrix.bgfx }} --depth 1 https://github.com/bkaradzic/bgfx.git bgfx

        # Genie
        git clone --recursive --branch ${{ matrix.genie }} --depth 1 https://github.com/bkaradzic/GENie.git genie

        # GLFW
        git clone --recursive --branch ${{ matrix.glfw }} --depth 1 https://github.com/glfw/glfw.git glfw

        # Mimalloc
        git clone --recursive --branch ${{ matrix.mimalloc }} --depth 1 https://github.com/microsoft/mimalloc.git mimalloc

        # Soloud
        git clone --recursive --branch ${{ matrix.soloud }} --depth 1 https://github.com/jarikomppa/soloud.git soloud

    - name: Cache ${{ matrix.source }} Source
      id: cache
      if: |
        steps.load.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ steps.link.outputs.source_dir }}
        key: ${{ steps.define.outputs.source_key }}

  cache_prepare:
    name: Cache Prepare Stage Flags
    runs-on: ubuntu-22.04
    needs: [define, deps, source, matrix]

    strategy:
      matrix: ${{ fromJSON(needs.matrix.outputs.matrix_prepare) }}

    outputs:
      prepare_json: ${{ steps.define.outputs.prepare_json }}

      deps_dir_shared: ${{ needs.deps.outputs.deps_dir_shared }}
      deps_dir_thirdparty: ${{ needs.deps.outputs.deps_dir_thirdparty }}

      deps_key_shared: ${{ needs.deps.outputs.deps_key_shared }}
      deps_key_thirdparty: ${{ needs.deps.outputs.deps_key_thirdparty }}

      source_dir_thirdparty: ${{ needs.source.outputs.source_dir_thirdparty }}

      source_key_thirdparty: ${{ needs.source.outputs.source_key_thirdparty }}

    steps:
    - name: Checkout repository
      id: checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        path: 'cross'

    # Export a JSON payload from here to the next stage to reduce needs and redundancy
    - name: Define Outputs
      id: define
      run: |
        export PREPARE_JSON=`bash ${{ env.JSON_PREP }} '${{ toJSON(needs.deps.outputs) }}' '${{ toJSON(needs.source.outputs) }}'`

        export DEPS_DIR=`bash ${{ env.JSON_SCRIPT }} $PREPARE_JSON '.deps_dir_${{ matrix.source }}'`
        export DEPS_KEY=`bash ${{ env.JSON_SCRIPT }} $PREPARE_JSON '.deps_key_${{ matrix.source }}'`

        export SHARED_DIR=`bash ${{ env.JSON_SCRIPT }} $PREPARE_JSON '.deps_key_${{ matrix.dep }}'`
        export SHARED_KEY=`bash ${{ env.JSON_SCRIPT }} $PREPARE_JSON '.deps_key_${{ matrix.dep }}'`

        export SOURCE_DIR=`bash ${{ env.JSON_SCRIPT }} $PREPARE_JSON '.source_dir_${{ matrix.source }}'`
        export SOURCE_KEY=`bash ${{ env.JSON_SCRIPT }} $PREPARE_JSON '.source_key_${{ matrix.source }}'`

        echo "prepare_json=$PREPARE_JSON" >> "$GITHUB_OUTPUT"

        echo "deps_dir=$DEPS_DIR" >> "$GITHUB_OUTPUT"
        echo "deps_key=$DEPS_KEY" >> "$GITHUB_OUTPUT"

        echo "shared_dir=$SHARED_DIR" >> "$GITHUB_OUTPUT"
        echo "shared_key=$SHARED_KEY" >> "$GITHUB_OUTPUT"

        echo "source_dir=$SOURCE_DIR" >> "$GITHUB_OUTPUT"
        echo "source_key=$SOURCE_KEY" >> "$GITHUB_OUTPUT"

  # This will be redone in the future; it works as is right now but could be optimized quite a bit
  sysroot:
    name: Prepare FreeBSD Sysroot
    runs-on: ubuntu-22.04
    needs: [define, matrix, deps]

    strategy:
      matrix: ${{ fromJSON(needs.matrix.outputs.matrix_sysroot) }}

    outputs:
      cross_host_freebsd_14_1: ${{ steps.key.outputs.cross_host_freebsd_14_1 }}
      cross_host_freebsd_14_0: ${{ steps.key.outputs.cross_host_freebsd_14_0 }}

      cross_host_freebsd_13_3: ${{ steps.key.outputs.cross_host_freebsd_13_3 }}

      sysroot_dir_freebsd_14_1: ${{ steps.define.outputs.sysroot_dir_freebsd_14_1 }}
      sysroot_dir_freebsd_14_0: ${{ steps.define.outputs.sysroot_dir_freebsd_14_0 }}

      sysroot_dir_freebsd_13_3: ${{ steps.define.outputs.sysroot_dir_freebsd_13_3 }}

      sysroot_key_freebsd_14_1: ${{ steps.key.outputs.sysroot_key_freebsd_14_1 }}
      sysroot_key_freebsd_14_0: ${{ steps.key.outputs.sysroot_key_freebsd_14_0 }}

      sysroot_key_freebsd_13_3: ${{ steps.key.outputs.sysroot_key_freebsd_13_3 }}

    steps:
    - name: Checkout repository
      id: checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        path: 'cross'

    - name: Define Outputs
      id: define
      env:
        SYSROOT_DIR: "${{ env.SYSROOT_DIR }}/${{ matrix.platform }}/${{ matrix.version }}"
      run: |
        mkdir -pv ${{ env.SYSROOT_DIR }}
        cp -rfv ${{ env.BSD_DEPS_SCRIPT }} ${{ env.SYSROOT_DIR }}
        
        export VERSION=`echo ${{ matrix.version }} | sed -e "s@\.@_@"`

        echo "sysroot_dir_${{ matrix.platform }}_$VERSION=${{ env.SYSROOT_DIR }}" >> "$GITHUB_OUTPUT"
        echo 'sysroot_dir=${{ env.SYSROOT_DIR }}' >> "$GITHUB_OUTPUT"

        echo 'shared_dir=${{ needs.deps.outputs.deps_dir_shared }}' >> "$GITHUB_OUTPUT"
        echo 'shared_key=${{ needs.deps.outputs.deps_key_shared }}' >> "$GITHUB_OUTPUT"

    - name: Define Sysroot
      id: key
      env:
        SYSROOT_HASH: "${{ hashFiles(format('**/freebsd/{0}', env.DEPS_HASH_SOURCE )) }}"
        SYSROOT_KEY: "${{ matrix.platform }}-${{ matrix.version }}-sysroot"
      run: |
        export TLD=$GITHUB_WORKSPACE

        export VERSION=`echo ${{ matrix.version }} | sed -e "s@\.@_@"`

        echo "sysroot_key_${{ matrix.platform }}_$VERSION=${{ env.SYSROOT_KEY }}-${{ env.SYSROOT_HASH }}" >> "$GITHUB_OUTPUT"
        echo 'sysroot_key=${{ env.SYSROOT_KEY }}-${{ env.SYSROOT_HASH }}' >> "$GITHUB_OUTPUT"

        echo "cross_host_${{ matrix.platform }}_$VERSION=x86_64-pc-${{ matrix.platform }}${{ matrix.version }}" >> "$GITHUB_OUTPUT"
        echo 'cross_host=x86_64-pc-${{ matrix.platform }}${{ matrix.version }}' >> "$GITHUB_OUTPUT"

        mkdir -pv $TLD/${{ env.CCACHE_DIR }}
        touch $TLD/${{ env.CCACHE_DIR }}/${{ env.CCACHE_HASH_SOURCE }}

    - name: Load ${{ matrix.stage }} cache
      id: load
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ steps.define.outputs.sysroot_dir }}
        key: |
          ${{ steps.key.outputs.sysroot_key }}
        lookup-only: true

    - name: Load ${{ matrix.stage }} ccache
      id: ld_ccache
      if: |
        steps.load.outputs.cache-hit != 'true'
      uses: actions/cache/restore@v4
      env:
        HASH: "${{ hashFiles(format('**/{0}', env.SOURCE_HASH_SOURCE)) }}"
      with:
        path: |
          ${{ env.CCACHE_DIR }}
        key: |
          ${{ matrix.platform }}-${{ matrix.version }}-ccache-key-$HASH
        restore-keys: |
          ${{ matrix.platform }}-${{ matrix.version }}-ccache-key-

    - name: Load ${{ matrix.shared }} Dependencies Cache
      id: shared
      if: |
        steps.load.outputs.cache-hit != 'true'
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ steps.define.outputs.shared_dir }}
        key: |
          ${{ steps.define.outputs.shared_key }}

    - name: Prepare Apt Sources
      id: apt
      if: |
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE
        export DEPS_DIR="${{ steps.define.outputs.shared_dir }}"

        bash $TLD/${{ env.DEPS_AFT }}

    # Cleanup so that Sysroot creation doesn't fail; it can get big
    - name: Prepare ${{ matrix.platform }} Runner
      id: runner
      if: |
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE

        # Grab required libraries and tools
        sudo apt-get update

        source $TLD/${{ env.DEPS_SCRIPT }}
        bash $TLD/cross/build/source/install-shared-deps.sh

        sudo apt-get install -y lzma wget memcached \
          libc6-dev gcc-multilib libnewlib-dev \
          libgcc-12-dev libgcc-s1 musl-dev \
          libgmp3-dev libmpc-dev libmpfr-dev libisl-dev

        #sudo find / -type d -name "docker" -prune -exec rm -rf '{}' \+
        #sudo find / -type d -name "dotnet" -prune -exec rm -rf '{}' \+
        #sudo find / -type d -name "ghc" -prune -exec rm -rf '{}' \+
        #sudo find / -type d -name "mono" -prune -exec rm -rf '{}' \+
        #sudo find / -type d -name "pipx" -prune -exec rm -rf '{}' \+
        #sudo find / -type d -name "chrom*" -prune -exec rm -rf '{}' \+
        #sudo find / -type d -name "microsoft" -prune -exec rm -rf '{}' \+
        #sudo find / -type d -name "$AGENT_TOOLSDIRECTORY" -prune -exec rm -rf '{}' \+
        #sudo find /usr/local -type d -name "boost" -prune -exec rm -rf '{}' \;

    - name: Prepare Memcached
      id: memcached
      if: |
        steps.load.outputs.cache-hit != 'true'
      env:
        MEMORY: "4096"
      run: |
        export TLD=$GITHUB_WORKSPACE

        # configure memcached
        echo "-m ${{ env.MEMORY }}" | sudo tee -a /etc/memcached.conf

        # Run memcached
        sudo systemctl restart memcached

        echo 'memory=${{ env.MEMORY }}' >> "$GITHUB_OUTPUT"

        sudo ss -plunt

    - name: Prepare Sysroot
      id: builder
      if: |
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE
        export SYSROOT_DIR=$TLD/${{ steps.define.outputs.sysroot_dir }}
        export PREFIX_DIR=$SYSROOT_DIR/${{ steps.key.outputs.cross_host }}

        # FreeBSD base images
        wget http://ftp.freebsd.org/pub/FreeBSD/releases/amd64/${{ matrix.version }}-RELEASE/base.txz

        mkdir -pv $PREFIX_DIR/usr/lib \
          $PREFIX_DIR/lib \
          $TLD/builder

        cd $TLD/builder

        tar xf ../base.txz
        mv -v usr/include $PREFIX_DIR/
        mv -v usr/lib/*.o $PREFIX_DIR/lib
        rm -rf usr/lib/libca* usr/lib/libco* usr/lib/libcr* usr/lib/libcu* usr/lib/libct* usr/lib/libcxg* \
          lib/libca* lib/libcr* lib/libct*
        mv -v usr/lib/libc* $PREFIX_DIR/lib
        mv -v lib/libc* $PREFIX_DIR/lib
        mv -v lib/libm.so* $PREFIX_DIR/lib
        ln -sv $PREFIX_DIR/lib/*.o $PREFIX_DIR
        mv -v usr/lib/libm.so* $PREFIX_DIR/lib
        cd $TLD
        
        rm -rf base.txz builder

        export CCACHE_DIR=$TLD/${{ env.CCACHE_DIR }}
        export CCACHE_MAXSIZE="512M"

        # Configure memcached
        mkdir -pv $CCACHE_DIR
        echo "memcached_conf = --SERVER=localhost:11211" | tee -a $CCACHE_DIR/ccache.conf
        echo "memcached_only = true" | tee -a $CCACHE_DIR/ccache.conf

        # Configure Source hash
        mkdir -pv $TLD/${{ env.SOURCE_DIR }}
        touch $TLD/${{ env.SOURCE_DIR }}/${{ env.SOURCE_HASH_SOURCE }}

    - name: Prepare Source Key
      id: hash
      if: |
        steps.load.outputs.cache-hit != 'true'
      env:
        HASH: "${{ hashFiles(format('**/{0}', env.SOURCE_HASH_SOURCE)) }}"
      run: |
        echo 'source_key=${{ env.HASH }}' >> "$GITHUB_OUTPUT"
        
    - name: Load Cross-Compiler Dependencies cache
      id: cdeps
      if: |
        steps.load.outputs.cache-hit != 'true'
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ env.SOURCE_DIR }}
        key: |
          ${{ matrix.platform }}-${{ matrix.version }}-sysroot-deps-${{ steps.hash.outputs.source_key }}

    - name: Checkout LLVM Source from Git
      id: llvm
      if: |
        steps.load.outputs.cache-hit != 'true' &&
        steps.cdeps.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: 'llvm/llvm-project'
        path: '${{ env.SOURCE_DIR }}/llvm'
        submodules: recursive
        ref: 'release/17.x'

    - name: Download Cross-Compiler Dependencies
      id: source
      if: |
        steps.load.outputs.cache-hit != 'true' &&
        steps.cdeps.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE

        cd $TLD/${{ env.SOURCE_DIR }}
        wget https://ftp.gnu.org/gnu/binutils/binutils-${{ matrix.binutils }}.tar.xz
        wget https://ftp.gnu.org/gnu/gcc/gcc-${{ matrix.gcc }}/gcc-${{ matrix.gcc }}.tar.xz
        wget https://ftp.gnu.org/gnu/gmp/gmp-${{ matrix.gmp }}.tar.xz
        wget https://gcc.gnu.org/pub/gcc/infrastructure/isl-${{ matrix.isl }}.tar.bz2
        wget https://ftp.gnu.org/gnu/mpc/mpc-${{ matrix.mpc }}.tar.gz
        wget https://ftp.gnu.org/gnu/mpfr/mpfr-${{ matrix.mpfr }}.tar.xz
        wget http://git.etalabs.net/cgit/musl/snapshot/musl-${{ matrix.musl }}.tar.gz
        cd $TLD

    - name: Cache Cross-Compiler Dependencies
      id: cdcache
      if: |
        steps.load.outputs.cache-hit != 'true' &&
        steps.cdeps.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ env.SOURCE_DIR }}
        key: |
          ${{ matrix.platform }}-${{ matrix.version }}-sysroot-deps-${{ steps.hash.outputs.source_key }}

    - name: Build Binutils Stage 1
      id: binutils-s1
      if: |
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE

        export SYSROOT_DIR=$TLD/${{ steps.define.outputs.sysroot_dir }}
        export PREFIX_DIR=$SYSROOT_DIR/${{ steps.key.outputs.cross_host }}
        
        export LLVM_INSTALL_DIR=/usr/lib/llvm-${{ env.CLANG_VERSION }}
        sudo bash $TLD/${{ env.LLVM_UA_SCRIPT}} '${{ env.CLANG_VERSION }}' '10000'
        source $TLD/${{ env.LLVM_BUILD_SCRIPT }}

        export TARGET=${{ steps.key.outputs.cross_host }}
        export PATH="$SYSROOT_DIR/bin:$PATH"

        export CCACHE_DIR=$TLD/${{ env.CCACHE_DIR }}
        export CC="ccache clang"
        export CXX="ccache clang++"
        export CPP=clang-cpp
        export NM=llvm-nm
        export RANLIB=llvm-ranlib
        export STRIP=llvm-strip
        export AR=llvm-ar
        export AS=llvm-as
        export LD=ld.lld

        # Build these using this as a basis: http://clfs.org/view/git/x86_64-64/cross-tools
        mkdir -pv $TLD/builder

        # Use this to build cross-compiler: https://wiki.osdev.org/GCC_Cross-Compiler#Which_binutils_version_to_choose
        cd $TLD/builder
        # Build cross-binutils
        tar xf $TLD/${{ env.SOURCE_DIR }}/binutils*
        mkdir -pv binutils-build
        cd binutils-build
  
        ../binutils-${{ matrix.binutils }}/configure \
          --target=$TARGET \
          --prefix=$SYSROOT_DIR \
          --with-sysroot \
          --disable-nls \
          --disable-werror
        make -j$(nproc)
        make install

        echo "Binutils complete" | tee -a $TLD/${{ env.CCACHE_DIR }}/${{ env.CCACHE_HASH_SOURCE }}

    - name: Build GMP Stage 1
      id: gmp-s1
      if: |
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE

        export SYSROOT_DIR=$TLD/${{ steps.define.outputs.sysroot_dir }}
        export PREFIX_DIR=$SYSROOT_DIR/${{ steps.key.outputs.cross_host }}
        
        export LLVM_INSTALL_DIR=/usr/lib/llvm-${{ env.CLANG_VERSION }}
        sudo bash $TLD/${{ env.LLVM_UA_SCRIPT}} '${{ env.CLANG_VERSION }}' '10000'
        source $TLD/${{ env.LLVM_BUILD_SCRIPT }}

        export TARGET=${{ steps.key.outputs.cross_host }}
        export PATH="$SYSROOT_DIR/bin:$PATH"

        export CCACHE_DIR=$TLD/${{ env.CCACHE_DIR }}
        export CC="ccache clang"
        export CXX="ccache clang++"
        export CPP=clang-cpp
        export NM=$TARGET-nm
        export RANLIB=$TARGET-ranlib
        export STRIP=$TARGET-strip
        export AR=$TARGET-ar
        export AS=$TARGET-as
        export LD=$TARGET-ld

        # Build these using this as a basis: http://clfs.org/view/git/x86_64-64/cross-tools
        mkdir -pv $TLD/builder
        cd $TLD/builder
        # Build GMP first
        tar xf $TLD/${{ env.SOURCE_DIR }}/gmp*
        cd gmp-${{ matrix.gmp }}
        ./configure \
          --prefix=$SYSROOT_DIR \
          --host=$TARGET \
          --enable-mpbsd \
          --enable-fft \
          --enable-cxx \
          --enable-static \
          --enable-shared 
        make -j$(nproc)
        make install

        echo "GMP complete" | tee -a $TLD/${{ env.CCACHE_DIR }}/${{ env.CCACHE_HASH_SOURCE }}

    - name: Build MPFR Stage 1
      id: mpfr-s1
      if: |
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE

        export SYSROOT_DIR=$TLD/${{ steps.define.outputs.sysroot_dir }}
        export PREFIX_DIR=$SYSROOT_DIR/${{ steps.key.outputs.cross_host }}
        
        export LLVM_INSTALL_DIR=/usr/lib/llvm-${{ env.CLANG_VERSION }}
        sudo bash $TLD/${{ env.LLVM_UA_SCRIPT}} '${{ env.CLANG_VERSION }}' '10000'
        source $TLD/${{ env.LLVM_BUILD_SCRIPT }}

        export TARGET=${{ steps.key.outputs.cross_host }}
        export PATH="$SYSROOT_DIR/bin:$PATH"

        export CCACHE_DIR=$TLD/${{ env.CCACHE_DIR }}
        export CC="ccache clang"
        export CXX="ccache clang++"
        export CPP=clang-cpp
        export NM=$TARGET-nm
        export RANLIB=$TARGET-ranlib
        export STRIP=$TARGET-strip
        export AR=$TARGET-ar
        export AS=$TARGET-as
        export LD=$TARGET-ld

        cd $TLD/builder
        # Build MPFR
        tar xf $TLD/${{ env.SOURCE_DIR }}/mpfr*
        cd mpfr-${{ matrix.mpfr }}
        ./configure \
          --prefix=$SYSROOT_DIR \
          --with-gnu-ld \
          --enable-static \
          --enable-shared \
          --host=$TARGET \
          --with-gmp=$SYSROOT_DIR
        make -j$(nproc)
        make install

        echo "MPFR complete" | tee -a $TLD/${{ env.CCACHE_DIR }}/${{ env.CCACHE_HASH_SOURCE }}

    - name: Build MPC Stage 1
      id: mpc-s1
      if: |
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE

        export SYSROOT_DIR=$TLD/${{ steps.define.outputs.sysroot_dir }}
        export PREFIX_DIR=$SYSROOT_DIR/${{ steps.key.outputs.cross_host }}
        
        export LLVM_INSTALL_DIR=/usr/lib/llvm-${{ env.CLANG_VERSION }}
        sudo bash $TLD/${{ env.LLVM_UA_SCRIPT}} '${{ env.CLANG_VERSION }}' '10000'
        source $TLD/${{ env.LLVM_BUILD_SCRIPT }}

        export TARGET=${{ steps.key.outputs.cross_host }}
        export PATH="$SYSROOT_DIR/bin:$PATH"

        export CCACHE_DIR=$TLD/${{ env.CCACHE_DIR }}
        export CC="ccache clang"
        export CXX="ccache clang++"
        export CPP=clang-cpp
        export NM=$TARGET-nm
        export RANLIB=$TARGET-ranlib
        export STRIP=$TARGET-strip
        export AR=$TARGET-ar
        export AS=$TARGET-as
        export LD=$TARGET-ld

        cd $TLD/builder
        # Build MPC
        tar xf $TLD/${{ env.SOURCE_DIR }}/mpc*
        cd mpc-${{ matrix.mpc }}
        ./configure \
          --prefix=$SYSROOT_DIR \
          --with-gnu-ld \
          --enable-static \
          --enable-shared \
          --host=$TARGET \
          --with-gmp=$SYSROOT_DIR \
          --with-mpfr=$SYSROOT_DIR
        make -j$(nproc)
        make install

        echo "MPC complete" | tee -a $TLD/${{ env.CCACHE_DIR }}/${{ env.CCACHE_HASH_SOURCE }}

    - name: Build ISL Stage 1
      id: isl-s1
      if: |
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE

        export SYSROOT_DIR=$TLD/${{ steps.define.outputs.sysroot_dir }}
        export PREFIX_DIR=$SYSROOT_DIR/${{ steps.key.outputs.cross_host }}
        
        export LLVM_INSTALL_DIR=/usr/lib/llvm-${{ env.CLANG_VERSION }}
        sudo bash $TLD/${{ env.LLVM_UA_SCRIPT}} '${{ env.CLANG_VERSION }}' '10000'
        source $TLD/${{ env.LLVM_BUILD_SCRIPT }}

        export TARGET=${{ steps.key.outputs.cross_host }}
        export PATH="$SYSROOT_DIR/bin:$PATH"

        export CCACHE_DIR=$TLD/${{ env.CCACHE_DIR }}
        export CC="ccache clang"
        export CXX="ccache clang++"
        export CPP=clang-cpp
        export NM=$TARGET-nm
        export RANLIB=$TARGET-ranlib
        export STRIP=$TARGET-strip
        export AR=$TARGET-ar
        export AS=$TARGET-as
        export LD=$TARGET-ld

        cd $TLD/builder
        # Build ISL
        tar xf $TLD/${{ env.SOURCE_DIR }}/isl*
        cd isl-${{ matrix.isl }}
        ./configure \
          --prefix=$SYSROOT_DIR \
          --host=$TARGET \
          --disable-static \
          --with-gmp=$SYSROOT_DIR \
          --with-mpfr=$SYSROOT_DIR \
          --with-mpc=$SYSROOT_DIR
        make -j$(nproc)
        make install

        echo "ISL complete" | tee -a $TLD/${{ env.CCACHE_DIR }}/${{ env.CCACHE_HASH_SOURCE }}

    - name: Build GCC Stage 1
      id: gcc-s1
      if: |
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE

        export SYSROOT_DIR=$TLD/${{ steps.define.outputs.sysroot_dir }}
        export PREFIX_DIR=$SYSROOT_DIR/${{ steps.key.outputs.cross_host }}
        
        export LLVM_INSTALL_DIR=/usr/lib/llvm-${{ env.CLANG_VERSION }}
        sudo bash $TLD/${{ env.LLVM_UA_SCRIPT}} '${{ env.CLANG_VERSION }}' '10000'
        source $TLD/${{ env.LLVM_BUILD_SCRIPT }}

        export TARGET=${{ steps.key.outputs.cross_host }}
        export PATH="$SYSROOT_DIR/bin:$PATH"

        export CCACHE_DIR=$TLD/${{ env.CCACHE_DIR }}
        export CC="ccache clang"
        export CXX="ccache clang++"
        export CPP=clang-cpp
        export NM=$TARGET-nm
        export RANLIB=$TARGET-ranlib
        export STRIP=$TARGET-strip
        export AR=$TARGET-ar
        export AS=$TARGET-as
        export LD=$TARGET-ld

        export SPECS="$TLD/cross/patches/linux/specs.patch"

        cd $TLD/builder
        # Build cross-gcc
        tar xf $TLD/${{ env.SOURCE_DIR }}/gcc*
        mkdir -pv gcc-build

        # Patch to fix pathing
        cd gcc-${{ matrix.gcc }}
        sed -i '' -e "s@/tools@$SYSROOT_DIR@" $SPECS
        patch -Np1 -i $SPECS

        echo -en '\n#undef STANDARD_STARTFILE_PREFIX_1\n#define STANDARD_STARTFILE_PREFIX_1 "$SYSROOT_DIR/lib/"\n' >> gcc/config/linux.h
        echo -en '\n#undef STANDARD_STARTFILE_PREFIX_2\n#define STANDARD_STARTFILE_PREFIX_2 ""\n' >> gcc/config/linux.h

        touch $SYSROOT_DIR/include/limits.h

        # Tell the compiler to use the FreeBSD headers from the sysroot here so that it compiles properly
        cd ../gcc-build
        ../gcc-${{ matrix.gcc }}/configure \
          --prefix=$SYSROOT_DIR \
          --disable-nls \
          --without-headers \
          --enable-languages=c,c++ \
          --target=$TARGET \
          --with-gmp=$SYSROOT_DIR \
          --with-isl=$SYSROOT_DIR \
          --with-mpfr=$SYSROOT_DIR \
          --with-mpc=$SYSROOT_DIR \
          --with-newlib \
          --with-system-zlib

        echo "Make breaks here"

        export LD_LIBRARY_PATH=$PREFIX/lib
        make -j$(nproc) all-gcc
        make -j$(nproc) all-target-libgcc
        make install-gcc
        make install-target-libgcc

        echo "GCC complete" | tee -a $TLD/${{ env.CCACHE_DIR }}/${{ env.CCACHE_HASH_SOURCE }}

    - name: Cleanup Stage 1
      id: clean-s1
      if: |
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE

        cd $TLD/builder
        rm -rfv *

    - name: Build Binutils Stage 2
      id: binutils-s2
      if: |
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE
        export SYSROOT_DIR=$TLD/${{ steps.define.outputs.sysroot_dir }}
        export PREFIX_DIR=$SYSROOT_DIR/${{ steps.key.outputs.cross_host }}
        
        export TARGET=${{ steps.key.outputs.cross_host }}
        export PATH="$SYSROOT_DIR/bin:$PATH"

        export CCACHE_DIR=$TLD/${{ env.CCACHE_DIR }}
        export CC="ccache $TARGET-gcc"
        export CXX="ccache $TARGET-g++"
        export CPP=$TARGET-cpp
        export NM=$TARGET-nm
        export RANLIB=$TARGET-ranlib
        export STRIP=$TARGET-strip
        export AR=$TARGET-ar
        export AS=$TARGET-as
        export LD=$TARGET-ld

        # Build cross-binutils
        tar xf $TLD/${{ env.SOURCE_DIR }}/binutils*
        mkdir -pv binutils-build
        cd binutils-build
  
        ../binutils-${{ matrix.binutils }}/configure \
          --target=$TARGET \
          --prefix=$SYSROOT_DIR \
          --with-sysroot \
          --enable-libssp \
          --enable-gold \
          --enable-ld \
          --disable-nls \
          --disable-werror
        make -j$(nproc)
        make install

        echo "Binutils complete" | tee -a $TLD/${{ env.CCACHE_DIR }}/${{ env.CCACHE_HASH_SOURCE }}

    - name: Build LLVM Stage 3
      id: llvm-s3
      if: |
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE
        export SYSROOT_DIR=$TLD/${{ steps.define.outputs.sysroot_dir }}
        export PREFIX_DIR=$SYSROOT_DIR/${{ steps.key.outputs.cross_host }}
        
        export TARGET=${{ steps.key.outputs.cross_host }}
        export PATH="$SYSROOT_DIR/bin:$PATH"

        export CCACHE_DIR=$TLD/${{ env.CCACHE_DIR }}
        export CC="ccache $TARGET-gcc"
        export CXX="ccache $TARGET-g++"
        export CPP=$TARGET-cpp
        export NM=$TARGET-nm
        export RANLIB=$TARGET-ranlib
        export STRIP=$TARGET-strip
        export AR=$TARGET-ar
        export AS=$TARGET-as
        export LD=$TARGET-gold

        cd $TLD/${{ env.SOURCE_DIR }}/llvm

        cmake -G Ninja ./llvm \
          -B build \
          -DCMAKE_C_COMPILER=$CC \
          -DCMAKE_CXX_COMPILER=$CXX \
          -DCMAKE_ASM_COMPILER=$AS \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_INSTALL_PREFIX=$PREFIX_DIR \
          -DCMAKE_CXX_STANDARD=${{ env.CXX_STANDARD_VERSION }} \
          -DCMAKE_BUILD_TYPE=MinSizeRel \
          -DCMAKE_USE_LINKER=lld \
          -DCMAKE_SYSTEM_NAME="FreeBSD" \
          -DCMAKE_HOST_TRIPLE=$TARGET \
          -DCMAKE_CXX_FLAGS="-isysroot $SYSROOT_DIR/include \
            --sysroot=$SYSROOT_DIR \
            --target=$TARGET" \
          -DLLVM_ENABLE_PROJECTS="clang;libclc;polly" \
          -DLLVM_ENABLE_RUNTIMES="all" \
          -DLLVM_INCLUDE_EXAMPLES=OFF \
          -DLLVM_NSTALL_BINUTILS_SYMLINKS=TRUE \
          -DLLVM_INSTALL_CCTOOLS_SYMLINKS=TRUE \
          -DLLVM_STATIC_LINK_CXX_STDLIB=TRUE

        cmake --build build --parallel $(nproc)
        cmake --build build --install

        echo "LLVM complete" | tee -a $TLD/${{ env.CCACHE_DIR }}/${{ env.CCACHE_HASH_SOURCE }}

        cd $TLD

        rm -rfv $TLD/${{ env.SOURCE_DIR }} $TLD/builder

    - name: Build ${{ matrix.platform }} ${{ matrix.version }} Sysroot
      id: sysroot
      if: |
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE
        export SYSROOT_DIR=$TLD/${{ steps.define.outputs.sysroot_dir }}
        export PREFIX_DIR=$SYSROOT_DIR/${{ steps.key.outputs.cross_host }}
        
        tar c $SYSROOT_DIR | xz -9 > freebsd.tar.xz
        rm -rf $SYSROOT_DIR $TLD/freebsd $MAKEOBJDIRPREFIX

    # FreeBSD Vm Rsync hack; it doesn't copy over all files unless I compress and then decompress here
    - name: Prepare FreeBSD Sysroot Cache
      id: prepare
      if: |
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE

        # Decompress sysroot archive
        tar xJf $TLD/freebsd.tar.xz
        rm -rfv $TLD/freebsd.tar.xz

    - name: Cache FreeBSD Sysroot
      id: cache
      if: |
        steps.load.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ steps.define.outputs.sysroot_dir }}
        key: |
          ${{ steps.key.outputs.sysroot_key }}

    - name: Cache FreeBSD ccache
      id: ccache
      if: |
        steps.load.outputs.cache-hit != 'true' &&
        always()
      env:
        HASH: "${{ hashFiles(format('**/{0}', env.CCACHE_HASH_SOURCE)) }}"
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ env.CCACHE_DIR }}
        key: |
          ${{ matrix.platform }}-${{ matrix.version }}-ccache-key-${{ env.HASH }}

  build_prepare:
    name: Prepare Build Stage
    needs: [define, matrix, sysroot, cache_prepare]
    runs-on: ubuntu-22.04
    strategy:
      matrix: ${{ fromJSON(needs.matrix.outputs.matrix_build) }}

    env:
      BUILD_CCACHE: "${{ matrix.platform }}/${{ matrix.version }}${{ matrix.build }}/${{ matrix.source }}"

    outputs:
      # ccache specific shared variables
      ccache_compress: ${{ steps.define.outputs.ccache_compress }}
      ccache_compresslevel: ${{ steps.define.outputs.ccache_compresslevel }}
      ccache_maxsize: ${{ steps.define.outputs.ccache_maxsize }}
      ccache_cmake_build_cflags: ${{ steps.define.outputs.ccache_cmake_build_cflags }}
      ccache_cmake_build_cxxflags: ${{ steps.define.outputs.ccache_cmake_build_cxxflags }}
      ccache_sloppiness: ${{ steps.define.outputs.ccache_sloppiness }}

      ccache_dir_static_linux_22_04_thirdparty: ${{ steps.cache.outputs.ccache_dir_static_linux_22_04_thirdparty }}

      ccache_dir_static_freebsd_14_1_thirdparty: ${{ steps.cache.outputs.ccache_dir_static_freebsd_14_1_thirdparty }}
      ccache_dir_static_freebsd_14_0_thirdparty: ${{ steps.cache.outputs.ccache_dir_static_freebsd_14_0_thirdparty }}

      ccache_dir_static_freebsd_13_3_thirdparty: ${{ steps.cache.outputs.ccache_dir_static_freebsd_13_3_thirdparty }}

      ccache_dir_dynamic_linux_22_04_thirdparty: ${{ steps.cache.outputs.ccache_dir_dynamic_linux_22_04_thirdparty }}

      ccache_dir_dynamic_freebsd_14_1_thirdparty: ${{ steps.cache.outputs.ccache_dir_dynamic_freebsd_14_1_thirdparty }}
      ccache_dir_dynamic_freebsd_14_0_thirdparty: ${{ steps.cache.outputs.ccache_dir_dynamic_freebsd_14_0_thirdparty }}

      ccache_dir_dynamic_freebsd_13_3_thirdparty: ${{ steps.cache.outputs.ccache_dir_dynamic_freebsd_13_3_thirdparty }}

      ccache_key_static_linux_22_04_thirdparty: ${{ steps.define.outputs.ccache_key_static_linux_22_04_thirdparty }}

      ccache_key_static_freebsd_14_1_thirdparty: ${{ steps.define.outputs.ccache_key_static_freebsd_14_1_thirdparty }}
      ccache_key_static_freebsd_14_0_thirdparty: ${{ steps.define.outputs.ccache_key_static_freebsd_14_0_thirdparty }}

      ccache_key_static_freebsd_13_3_thirdparty: ${{ steps.define.outputs.ccache_key_static_freebsd_13_3_thirdparty }}

      ccache_key_dynamic_linux_22_04_thirdparty: ${{ steps.define.outputs.ccache_key_dynamic_linux_22_04_thirdparty }}

      ccache_key_dynamic_freebsd_14_1_thirdparty: ${{ steps.define.outputs.ccache_key_dynamic_freebsd_14_1_thirdparty }}
      ccache_key_dynamic_freebsd_14_0_thirdparty: ${{ steps.define.outputs.ccache_key_dynamic_freebsd_14_0_thirdparty }}

      ccache_key_dynamic_freebsd_13_3_thirdparty: ${{ steps.define.outputs.ccache_key_dynamic_freebsd_13_3_thirdparty }}

      prefix_dir_static_linux_22_04_thirdparty: ${{ steps.define.outputs.prefix_dir_static_linux_22_04_thirdparty }}

      prefix_key_static_linux_22_04_thirdparty: ${{ steps.define.outputs.prefix_key_static_linux_22_04_thirdparty }}

      prefix_dir_static_freebsd_14_1_thirdparty: ${{ steps.define.outputs.prefix_dir_static_freebsd_14_1_thirdparty }}
      prefix_dir_static_freebsd_14_0_thirdparty: ${{ steps.define.outputs.prefix_dir_static_freebsd_14_0_thirdparty }}

      prefix_dir_static_freebsd_13_3_thirdparty: ${{ steps.define.outputs.prefix_dir_static_freebsd_13_3_thirdparty }}

      prefix_key_static_freebsd_14_1_thirdparty: ${{ steps.define.outputs.prefix_key_static_freebsd_14_1_thirdparty }}
      prefix_key_static_freebsd_14_0_thirdparty: ${{ steps.define.outputs.prefix_key_static_freebsd_14_0_thirdparty }}

      prefix_key_static_freebsd_13_3_thirdparty: ${{ steps.define.outputs.prefix_key_static_freebsd_13_3_thirdparty }}

      prefix_dir_dynamic_linux_22_04_thirdparty: ${{ steps.define.outputs.prefix_dir_dynamic_linux_22_04_thirdparty }}

      prefix_key_dynamic_linux_22_04_thirdparty: ${{ steps.define.outputs.prefix_key_dynamic_linux_22_04_thirdparty }}

      prefix_dir_dynamic_freebsd_14_1_thirdparty: ${{ steps.define.outputs.prefix_dir_dynamic_freebsd_14_1_thirdparty }}
      prefix_dir_dynamic_freebsd_14_0_thirdparty: ${{ steps.define.outputs.prefix_dir_dynamic_freebsd_14_0_thirdparty }}

      prefix_dir_dynamic_freebsd_13_3_thirdparty: ${{ steps.define.outputs.prefix_dir_dynamic_freebsd_13_3_thirdparty }}

      prefix_key_dynamic_freebsd_14_1_thirdparty: ${{ steps.define.outputs.prefix_key_dynamic_freebsd_14_1_thirdparty }}
      prefix_key_dynamic_freebsd_14_0_thirdparty: ${{ steps.define.outputs.prefix_key_dynamic_freebsd_14_0_thirdparty }}

      prefix_key_dynamic_freebsd_13_3_thirdparty: ${{ steps.define.outputs.prefix_key_dynamic_freebsd_13_3_thirdparty }}

      pkg_config_path: ${{ steps.define.outputs.pkg_config_path }}

      # Platform specific outputs
      platform_name_linux: ${{ steps.platform.outputs.platform_name_linux }}
      system_version_linux: ${{ steps.platform.outputs.system_version_linux }}
      cross_host_linux_22_04: ${{ steps.platform.outputs.cross_host_linux_22_04 }}

      platform_name_freebsd: ${{ steps.platform.outputs.platform_name_freebsd }}
      system_version_freebsd: ${{ steps.platform.outputs.system_version_freebsd }}
      cross_host_freebsd_14_1: ${{ steps.platform.outputs.cross_host_freebsd_14_1 }}
      cross_host_freebsd_14_0: ${{ steps.platform.outputs.cross_host_freebsd_14_0 }}
      cross_host_freebsd_13_3: ${{ steps.platform.outputs.cross_host_freebsd_13_3 }}

      cross_version_linux_22_04: ${{ steps.platform.outputs.cross_version_linux_22_04 }}
      cross_version_freebsd_14_1: ${{ steps.platform.outputs.cross_version_freebsd_14_1 }}
      cross_version_freebsd_14_0: ${{ steps.platform.outputs.cross_version_freebsd_14_0 }}
      cross_version_freebsd_13_3: ${{ steps.platform.outputs.cross_version_freebsd_13_3 }}

      # Sysroot outputs
      sysroot_dir_linux_22_04: ${{ steps.platform.outputs.sysroot_dir_linux_22_04 }}
      sysroot_dir_freebsd_14_1: ${{ steps.platform.outputs.sysroot_dir_freebsd_14_1 }}
      sysroot_dir_freebsd_14_0: ${{ steps.platform.outputs.sysroot_dir_freebsd_14_0 }}
      sysroot_dir_freebsd_13_3: ${{ steps.platform.outputs.sysroot_dir_freebsd_13_3 }}

      sysroot_key_linux_22_04: ${{ steps.platform.outputs.sysroot_key_linux_22_04 }}
      sysroot_key_freebsd_14_1: ${{ steps.platform.outputs.sysroot_key_freebsd_14_1 }}
      sysroot_key_freebsd_14_0: ${{ steps.platform.outputs.sysroot_key_freebsd_14_0 }}
      sysroot_key_freebsd_13_3: ${{ steps.platform.outputs.sysroot_key_freebsd_13_3 }}

      # Cmake outputs
      cmake_build_generator: ${{ steps.cmake.outputs.cmake_build_generator }}
      cmake_build_release: ${{ steps.cmake.outputs.cmake_build_release }}
      cmake_build_shared: ${{ steps.cmake.outputs.cmake_build_shared }}
      cmake_build_static: ${{ steps.cmake.outputs.cmake_build_static }}
      cmake_build_c_flags: ${{ steps.cmake.outputs.cmake_build_c_flags }}
      cmake_build_cxx_flags: ${{ steps.cmake.outputs.cmake_build_cxx_flags }}
      cmake_build_c_linker: ${{ steps.cmake.outputs.cmake_build_c_linker }}
      cmake_build_cxx_linker: ${{ steps.cmake.outputs.cmake_build_cxx_linker }}

      # Build outputs
      build_dir_static_linux_22_04_thirdparty: ${{ steps.define.outputs.build_dir_static_linux_22_04_thirdparty }}

      build_dir_static_freebsd_14_1_thirdparty: ${{ steps.define.outputs.build_dir_static_freebsd_14_1_thirdparty }}
      build_dir_static_freebsd_14_0_thirdparty: ${{ steps.define.outputs.build_dir_static_freebsd_14_0_thirdparty }}

      build_dir_static_freebsd_13_3_thirdparty: ${{ steps.define.outputs.build_dir_static_freebsd_13_3_thirdparty }}

      build_dir_dynamic_linux_22_04_thirdparty: ${{ steps.define.outputs.build_dir_dynamic_linux_22_04_thirdparty }}

      build_dir_dynamic_freebsd_14_1_thirdparty: ${{ steps.define.outputs.build_dir_dynamic_freebsd_14_1_thirdparty }}
      build_dir_dynamic_freebsd_14_0_thirdparty: ${{ steps.define.outputs.build_dir_dynamic_freebsd_14_0_thirdparty }}

      build_dir_dynamic_freebsd_13_3_thirdparty: ${{ steps.define.outputs.build_dir_dynamic_freebsd_13_3_thirdparty }}

    steps:
    - name: Checkout repository
      id: checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        path: 'cross'

    - name: Define Cmake Outputs
      id: cmake
      run: |
        export HEADERS="\
          -I/usr/local/include \
          -I/usr/local/lib/gcc${{ env.GCC_VERSION }}/include \
        "
        echo 'cmake_build_generator="-GNinja"' >> "$GITHUB_OUTPUT"
        echo 'cmake_build_release="-DCMAKE_BUILD_TYPE=Release"' >> "$GITHUB_OUTPUT"
        echo 'cmake_build_shared="-DBUILD_SHARED_LIBS=ON"' >> "$GITHUB_OUTPUT"
        echo 'cmake_build_static="-DBUILD_SHARED_LIBS=OFF"' >> "$GITHUB_OUTPUT"
        echo 'cmake_build_c_flags="-DCMAKE_C_FLAGS=\"-Wexceptions -std=${{ env.C_STANDARD_VERSION }} $HEADERS -Wno-error=unused-command-line-argument\""'
        echo 'cmake_build_cxx_flags="-DCMAKE_CXX_FLAGS=\"-Wexceptions -std=${{ env.CXX_STANDARD_VERSION }} $HEADERS -Wno-error=unused-command-line-argument\""'
        echo 'cmake_build_c_linker="-DCMAKE_C_LINK_EXECUTABlE=lld"' >> "$GITHUB_OUTPUT"
        echo 'cmake_build_cxx_linker="-DCMAKE_CXX_LINK_EXECUTABlE=lld"' >> "$GITHUB_OUTPUT"

    - name: Define Platform Outputs
      id: platform
      run: |
        export VERSION=`echo ${{ matrix.version }} | sed -e "s@\.@_@"`

        if [[ "${{ matrix.platform }}" == "freebsd" ]]; then
          export SYSROOT_JSON=`bash ${{ env.JSON_PREP }} '${{ toJSON(needs.sysroot.outputs) }}'`
          echo 'platform_name_${{ matrix.platform }}=FreeBSD' >> "$GITHUB_OUTPUT"
          echo 'system_version_${{ matrix.platform }}=${{ matrix.version }}' >> "$GITHUB_OUTPUT"

          export CROSS_HOST=`bash ${{ env.JSON_SCRIPT }} $SYSROOT_JSON ".cross_host_${{ matrix.platform }}_$VERSION"`

          echo "cross_host_${{ matrix.platform }}_$VERSION=$CROSS_HOST" >> "$GITHUB_OUTPUT"
          echo "cross_host=$CROSS_HOST" >> "$GITHUB_OUTPUT"

          export SYSROOT_DIR=`bash ${{ env.JSON_SCRIPT }} $SYSROOT_JSON ".sysroot_dir_${{ matrix.platform }}_$VERSION"`
          export SYSROOT_KEY=`bash ${{ env.JSON_SCRIPT }} $SYSROOT_JSON ".sysroot_key_${{ matrix.platform }}_$VERSION"`
        fi

        echo "CROSS_HOST=$CROSS_HOST"

        echo "cross_version_${{ matrix.platform }}_$VERSION=$VERSION" >> "$GITHUB_OUTPUT"
        echo "cross_version=$VERSION" >> "$GITHUB_OUTPUT"
        
        echo 'system_version=${{ matrix.version }}' >> "$GITHUB_OUTPUT"

        echo "sysroot_dir_${{ matrix.platform }}_$VERSION=$SYSROOT_DIR" >> "$GITHUB_OUTPUT"
        echo "syroot_dir=$SYSROOT_DIR" >> "$GITHUB_OUTPUT"

        echo "sysroot_key_${{ matrix.platform }}_$VERSION=$SYSROOT_KEY" >> "$GITHUB_OUTPUT"
        echo "syroot_key=$SYSROOT_KEY" >> "$GITHUB_OUTPUT"

    - name: Prepare ${{ matrix.source }} ${{ matrix.build }} ccache
      id: cache
      env:
        CCACHE_DIR: "${{ env.CCACHE_DIR }}/${{ env.BUILD_CCACHE }}"
      run: |
        mkdir -pv ${{ env.CCACHE_DIR }}
        touch ${{ env.CCACHE_DIR }}/${{ env.CCACHE_HASH_SOURCE }}

        echo 'VERSION: ${{ steps.platform.outputs.cross_version }}'

        echo "ccache_dir_${{ matrix.build }}_${{ matrix.platform }}_${{ steps.platform.outputs.cross_version }}_${{ matrix.source }}=${{ env.CCACHE_DIR }}" >> "$GITHUB_OUTPUT"

    - name: Define Outputs
      id: define
      env:
        CCACHE_KEY: "${{ matrix.platform }}-${{ matrix.version }}-${{ matrix.source }}-${{ matrix.build }}-ccache"
        CCACHE_HASH: "${{ hashFiles(format('**/{0}', env.CCACHE_HASH_SOURCE)) }}"
        CCACHE_COMPRESS: true
        CCACHE_COMPRESSLEVEL: 6
        CCACHE_MAXSIZE: "256MB"
        CCACHE_CMAKE_CFLAGS: "-DCMAKE_C_COMPILER_LAUNCHER=ccache" 
        CCACHE_CMAKE_CXXFLAGS: "-DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
        CCACHE_SLOPPINESS: "include_file_mtime,pch_defines,system_headers,include_file_ctime"
        PREFIX_DIR: "${{ env.PREFIX_DIR }}/${{ matrix.platform }}/${{ matrix.version }}/${{ matrix.build }}/${{ matrix.source }}"
        BUILD_DIR: "${{ env.BUILD_DIR }}/${{ matrix.platform }}/${{ matrix.version }}/${{ matrix.build }}/${{ matrix.source }}"

      run: |
        echo "ccache_key_${{ matrix.build }}_${{ matrix.platform }}_${{ steps.platform.outputs.cross_version }}_${{ matrix.source }}=${{ env.CCACHE_KEY }}-${{ env.CCACHE_HASH }}" >> "$GITHUB_OUTPUT"
        echo 'ccache_compress=${{ env.CCACHE_COMPRESS }}' >> "$GITHUB_OUTPUT"
        echo 'ccache_compresslevel=${{ env.CCACHE_COMPRESSLEVEL }}' >> "$GITHUB_OUTPUT"
        echo 'ccache_maxsize=${{ env.CCACHE_MAXSIZE }}' >> "$GITHUB_OUTPUT"
        echo 'ccache_cmake_build_cflags=${{ env.CCACHE_CMAKE_CFLAGS }}' >> "$GITHUB_OUTPUT"
        echo 'ccache_cmake_build_cxxflags=${{ env.CCACHE_CMAKE_CFLAGS }}' >> "$GITHUB_OUTPUT"
        echo 'ccache_sloppiness=${{ env.CCACHE_SLOPPINESS }}' >> "$GITHUB_OUTPUT"

        # Output Prepare Stage JSON Payloads to be used in the other jobs
        echo 'prepare_json=${{ needs.cache_prepare.outputs.prepare_json }}' >> "$GITHUB_OUTPUT"

        # Set up where all of the source will be built and installed for future usage
        export SOURCE_HASH=`bash ${{ env.JSON_SCRIPT }} '${{ needs.cache_prepare.outputs.prepare_json }}' '.source_hash'`
        export PREFIX_KEY=${{ matrix.platform }}-${{ matrix.version }}-${{ matrix.build }}-${{ matrix.source }}-$SOURCE_HASH

        echo 'prefix_dir_${{ matrix.build }}_${{ matrix.platform }}_${{ steps.platform.outputs.cross_version }}_${{ matrix.source }}=${{ env.PREFIX_DIR }}' >> "$GITHUB_OUTPUT"
        echo "prefix_key_${{ matrix.build }}_${{ matrix.platform }}_${{ steps.platform.outputs.cross_version }}_${{ matrix.source }}=$PREFIX_KEY" >> "$GITHUB_OUTPUT"

        echo 'build_dir_${{ matrix.build }}_${{ matrix.platform }}_${{ steps.platform.outputs.cross_version }}_${{ matrix.source }}=${{ env.BUILD_DIR }}' >> "$GITHUB_OUTPUT"

    - name: Trigger ${{ matrix.platform }} Build Stage
      id: prepare
      run: |
        echo 'complete=${{ steps.load.outputs.cache-hit }}' >> "$GITHUB_OUTPUT"

  static_deps:
    name: Compile Static Dependencies
    runs-on: ubuntu-22.04
    needs: [define, matrix, cache_prepare, build_prepare]

    # description: 'Build static versions of dependencies not provided in Ubuntu repositories so that system libraries are not linked against when compiling QT statically'

    strategy:
      matrix: ${{ fromJSON(needs.matrix.outputs.matrix_build_static_deps) }}

    steps:
    - name: Checkout repository
      id: checkout
      if: |
        needs.build_prepare.outputs.complete != 'true'
      uses: actions/checkout@v4
      with:
        submodules: recursive
        path: 'cross'

    - name: Define Platform Outputs
      id: platform
      if: |
        needs.build_prepare.outputs.complete != 'true'
      run: |
        export BUILD_JSON=`bash ${{ env.JSON_PREP }} '${{ toJSON(needs.build_prepare.outputs) }}'`

        export VERSION=`echo ${{ matrix.version }} | sed -e "s@\.@_@"`

        export PLATFORM_NAME=`bash ${{ env.JSON_SCRIPT }} $BUILD_JSON '.platform_name_${{ matrix.platform }}'`
        export SYSTEM_VERSION=`bash ${{ env.JSON_SCRIPT }} $BUILD_JSON '.system_name_${{ matrix.platform }}'`

        echo "platform_name=$PLATFORM_NAME" >> "$GITHUB_OUTPUT"
        echo "system_version=$SYSTEM_VERSION" >> "$GITHUB_OUTPUT"

        export CROSS_VERSION=`bash ${{ env.JSON_SCRIPT }} $BUILD_JSON ".cross_version_${{ matrix.platform }}_$VERSION"`
        echo "cross_version=$CROSS_VERSION" >> "$GITHUB_OUTPUT"

        export CROSS_HOST=`bash ${{ env.JSON_SCRIPT }} $BUILD_JSON ".cross_host_${{ matrix.platform }}_$VERSION"`
        echo "cross_host=$CROSS_HOST" >> "$GITHUB_OUTPUT"

        # For Genie to work correctly; strip out free from freebsd but leave platforms alone
        export GENIE_OS=`echo ${{ matrix.platform }} | sed -e "s@free@@"`
        echo "genie_os=$GENIE_OS" >> "$GITHUB_OUTPUT"

        # Sysroot outputs
        export SYSROOT_DIR=`bash ${{ env.JSON_SCRIPT }} $BUILD_JSON ".sysroot_dir_${{ matrix.platform }}_$VERSION"`
        export SYSROOT_KEY=`bash ${{ env.JSON_SCRIPT }} $BUILD_JSON ".sysroot_key_${{ matrix.platform }}_$VERSION"`

        echo "sysroot_dir=$SYSROOT_DIR" >> "$GITHUB_OUTPUT"
        echo "sysroot_key=$SYSROOT_KEY" >> "$GITHUB_OUTPUT"

    - name: Define Outputs
      id: define
      if: |
        needs.build_prepare.outputs.complete != 'true'
      run: |
        export BUILD_JSON=`bash ${{ env.JSON_PREP }} '${{ toJSON(needs.build_prepare.outputs) }}'`

        export CCACHE_DIR=`bash ${{ env.JSON_SCRIPT }} $BUILD_JSON '.ccache_dir_${{ matrix.build }}_${{ matrix.platform }}_${{ steps.platform.outputs.cross_version }}_${{ matrix.source }}'`
        export CCACHE_KEY=`bash ${{ env.JSON_SCRIPT }} $BUILD_JSON '.ccache_key_${{ matrix.build }}_${{ matrix.platform }}_${{ steps.platform.outputs.cross_version }}_${{ matrix.source }}'`

        echo "ccache_dir=$CCACHE_DIR" >> "$GITHUB_OUTPUT"
        echo "ccache_key=$CCACHE_KEY" >> "$GITHUB_OUTPUT"

        echo "CCACHE_DIR: $CCACHE_DIR"
        echo "CCACHE_KEY: $CCACHE_KEY"

        export DEPS_DIR=`bash ${{ env.JSON_SCRIPT }} '${{ needs.cache_prepare.outputs.prepare_json }}' '.deps_dir_${{ matrix.dep }}'`
        export DEPS_KEY=`bash ${{ env.JSON_SCRIPT }} '${{ needs.cache_prepare.outputs.prepare_json }}' '.deps_key_${{ matrix.dep }}'`

        echo "deps_dir=$DEPS_DIR" >> "$GITHUB_OUTPUT"
        echo "deps_key=$DEPS_KEY" >> "$GITHUB_OUTPUT"

        export SHARED_DIR=`bash ${{ env.JSON_SCRIPT }} '${{ needs.cache_prepare.outputs.prepare_json }}' '.deps_dir_${{ matrix.shared }}'`
        export SHARED_KEY=`bash ${{ env.JSON_SCRIPT }} '${{ needs.cache_prepare.outputs.prepare_json }}' '.deps_key_${{ matrix.shared }}'`

        echo "shared_dir=$SHARED_DIR" >> "$GITHUB_OUTPUT"
        echo "shared_key=$SHARED_KEY" >> "$GITHUB_OUTPUT"

        export SOURCE_DIR=`bash ${{ env.JSON_SCRIPT }} '${{ needs.cache_prepare.outputs.prepare_json }}' '.source_dir_${{ matrix.source }}'`
        export SOURCE_KEY=`bash ${{ env.JSON_SCRIPT }} '${{ needs.cache_prepare.outputs.prepare_json }}' '.source_key_${{ matrix.source }}'`

        echo "source_dir=$SOURCE_DIR" >> "$GITHUB_OUTPUT"
        echo "source_key=$SOURCE_KEY" >> "$GITHUB_OUTPUT"

        export SOURCE_HASH=`bash ${{ env.JSON_SCRIPT }} '${{ needs.cache_prepare.outputs.prepare_json }}' '.source_hash'`

        echo "source_hash=$SOURCE_HASH" >> "$GITHUB_OUTPUT"

        export PREFIX_DIR=`bash ${{ env.JSON_SCRIPT }} $BUILD_JSON '.prefix_dir_${{ matrix.build }}_${{ matrix.platform }}_${{ steps.platform.outputs.cross_version }}_${{ matrix.source }}'`
        export PREFIX_KEY=`bash ${{ env.JSON_SCRIPT }} $BUILD_JSON '.prefix_key_${{ matrix.build }}_${{ matrix.platform }}_${{ steps.platform.outputs.cross_version }}_${{ matrix.source }}'`

        echo "prefix_dir=$PREFIX_DIR" >> "$GITHUB_OUTPUT"
        echo "prefix_key=$PREFIX_KEY" >> "$GITHUB_OUTPUT"

        export BUILD_DIR=`bash ${{ env.JSON_SCRIPT }} $BUILD_JSON '.build_dir_${{ matrix.build }}_${{ matrix.platform }}_${{ steps.platform.outputs.cross_version }}_${{ matrix.source }}'`

        echo "build_dir=$BUILD_DIR" >> "$GITHUB_OUTPUT"

    - name: Load ${{ matrix.platform }} ${{ matrix.build }} cache
      id: load
      if: |
        needs.build_prepare.outputs.complete != 'true'
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ steps.define.outputs.prefix_dir }}
        key: |
          ${{ steps.define.outputs.prefix_key }}

    - name: Load ${{ matrix.source }} ${{ matrix.build }} ccache
      id: load_ccache
      if: |
        needs.build_prepare.outputs.complete != 'true' &&
        steps.load.outputs.cache-hit != 'true'
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ steps.define.outputs.ccache_dir }}
        key: |
          ${{ steps.define.outputs.ccache_key }}

    - name: Load ${{ matrix.source }} Source Cache
      id: source
      if: |
        needs.build_prepare.outputs.complete != 'true' &&
        steps.load.outputs.cache-hit != 'true'
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ steps.define.outputs.source_dir }}
        key: |
          ${{ steps.define.outputs.source_key }}

    - name: Load ${{ matrix.shared }} Dependencies Cache
      id: shared
      if: |
        needs.build_prepare.outputs.complete != 'true' &&
        steps.load.outputs.cache-hit != 'true'
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ steps.define.outputs.shared_dir }}
        key: |
          ${{ steps.define.outputs.shared_key }}

    - name: Load ${{ matrix.dep }} Dependencies Cache
      id: deps
      if: |
        needs.build_prepare.outputs.complete != 'true' &&
        steps.load.outputs.cache-hit != 'true'
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ steps.define.outputs.deps_dir }}
        key: |
          ${{ steps.define.outputs.deps_key }}

    - name: Load ${{ matrix.platform }} Sysroot Cache
      id: sysroot
      if: |
        needs.build_prepare.outputs.complete != 'true' &&
        steps.load.outputs.cache-hit != 'true'
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ steps.platform.outputs.sysroot_dir }}
        key: |
          ${{ steps.platform.outputs.sysroot_key }}

    - name: Prepare Apt Sources
      id: apt
      if: |
        needs.build_prepare.outputs.complete != 'true' &&
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE
        export DEPS_DIR="${{ steps.define.outputs.deps_dir }}"

        bash $TLD/${{ env.DEPS_AFT }}

    - name: Install ${{ matrix.source }} Dependencies
      id: install
      if: |
        needs.build_prepare.outputs.complete != 'true' &&
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE

        sudo apt-get update
        source $TLD/${{ env.DEPS_SCRIPT }}
        bash $TLD/cross/build/source/install-${{ matrix.shared }}-deps.sh
        bash $TLD/cross/build/source/install-${{ matrix.dep }}-deps.sh

    - name: Prepare Build Toolchain
      id: toolchain
      if: |
        needs.build_prepare.outputs.complete != 'true' &&
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE
        export LLVM_INSTALL_DIR=/usr/lib/llvm-${{ env.CLANG_VERSION }}

        # Set LLVM specific variables
        sudo bash $TLD/${{ env.LLVM_UA_SCRIPT }} '${{ env.CLANG_VERSION }}' '10000'

        sudo mv -v /usr/lib/llvm-14 /usr/lib/llvm-bck
        sudo ln -sv $LLVM_INSTALL_DIR /usr/lib/llvm-14

    - name: Build Genie
      id: genie
      if: |
        needs.build_prepare.outputs.complete != 'true' &&
        steps.load.outputs.cache-hit != 'true'
      run: |
        export TLD=$GITHUB_WORKSPACE

        export CC=clang
        export CXX=clang++
        
        cd $TLD/${{ steps.define.outputs.source_dir }}/genie
        make -j$(nproc)
        chmod +x bin/linux/genie
        sudo mv -v bin/linux/genie /usr/bin

    - name: Build Static mimalloc
      id: mimalloc
      if: |
        needs.build_prepare.outputs.complete != 'true' &&
        steps.load.outputs.cache-hit != 'true'
      env:
        BUILD_DIR: "${{ steps.define.outputs.build_dir }}/mimalloc"
        SOURCE_DIR: "${{ steps.define.outputs.source_dir }}/mimalloc"
      shell: bash
      run: |
        export TLD=$GITHUB_WORKSPACE

        export CCACHE_DIR=$TLD/${{ steps.define.outputs.ccache_dir }}
        export CCACHE_COMPRESS=${{ needs.build_prepare.outputs.ccache_compress }}
        export CCACHE_COMPRESSLEVEL=${{ needs.build_prepare.outputs.ccache_compresslevel }}
        export CCACHE_MAXSIZE=${{ needs.build_prepare.outputs.ccache_maxsize }}
        export CCACHE_SLOPPINESS=${{ needs.build_prepare.outputs.ccache_sloppiness }}
        ccache -z

        cd $TLD/${{ env.SOURCE_DIR }}

        if [[ "${{ matrix.platform }}" == "freebsd" ]]; then
          #export SYSROOT="--sysroot=$TLD/${{ steps.platform.outputs.sysroot_dir }}"
          export INCLUDES="-I$TLD/${{ steps.platform.outputs.sysroot_dir }}/include -I$TLD/${{ steps.platform.outputs.sysroot_dir }}/include/c++/v1"
          export LDFLAGS="$LDFLAGS -Wl,-rpath=$TLD/${{ steps.platform.outputs.sysroot_dir }}/lib"
          export CFLAGS="$CFLAGS -target ${{ steps.platform.outputs.cross_host }} $SYSROOT $INCLUDES"
          export CXXFLAGS="$CXXFLAGS -target ${{ steps.platform.outputs.cross_host }} $SYSROOT $INCLUDES -stdlib=libc++"
          export LIBRARY_PATH=$TLD/${{ steps.platform.outputs.sysroot_dir }}/lib:$LIBRARY_PATH

          find $TLD/${{ steps.platform.outputs.sysroot_dir }}/lib -type f -name "*crt*.o" -prune -exec ln -sv '{}' . \;
          find $TLD/${{ steps.platform.outputs.sysroot_dir }}/lib -type f -name "libgcc*" -prune -exec ln -sv '{}' . \;
          find $TLD/${{ steps.platform.outputs.sysroot_dir }}/lib -type f -name "libc*" -prune -exec ln -sv '{}' . \;

          export LLVM_INSTALL_DIR=$TLD/${{ steps.platform.outputs.sysroot_dir }}
        elif [[ "${{ matrix.platform }}" == "linux" ]]; then
          export LLVM_INSTALL_DIR=/usr/lib/llvm-${{ env.CLANG_VERSION }}
        fi

        # Grab this so that Pkg-Config can find what it needs for qt5 to build properly
        export PKG_CONFIG_PATH=`pkg-config --variable pc_path pkg-config`

        mkdir -pv $TLD/${{ env.BUILD_DIR }}
        ln -sv $TLD/${{ env.BUILD_DIR }} build

        du -h $TLD/${{ steps.platform.outputs.sysroot_dir }}

        source $TLD/${{ env.LLVM_BUILD_SCRIPT }}

        cmake ${{ needs.build_prepare.outputs.cmake_build_generator }} \
          ${{ needs.build_prepare.outputs.ccache_cmake_build_cflags }} \
          ${{ needs.build_prepare.outputs.ccache_cmake_build_cxxflags }} \
          ${{ needs.build_prepare.outputs.cmake_build_release }} \
          -DCMAKE_INSTALL_PREFIX=$TLD/${{ steps.define.outputs.prefix_dir }} \
          ${{ needs.build_prepare.outputs.cmake_build_static }} \
          -B build \
          -S . \
          ${{ needs.build_prepare.outputs.cmake_build_c_flags }} \
          ${{ needs.build_prepare.outputs.cmake_build_cxx_flags }} \
          -DMI_USE_CXX="ON" \
          -DMI_BUILD_SHARED="OFF" -DMI_BUILD_TESTS=OFF

        cmake --build build --parallel $(nproc)
        cmake --install build

        ccache -s

        cd $TLD


    - name: Build Static soloud
      id: soloud
      if: |
        needs.build_prepare.outputs.complete != 'true' &&
        steps.load.outputs.cache-hit != 'true'
      env:
        BUILD_DIR: "${{ steps.define.outputs.build_dir }}/soloud"
        SOURCE_DIR: "${{ steps.define.outputs.source_dir }}/soloud"
      shell: bash
      run: |
        export TLD=$GITHUB_WORKSPACE

        export CCACHE_DIR=$TLD/${{ steps.define.outputs.ccache_dir }}
        export CCACHE_COMPRESS=${{ needs.build_prepare.outputs.ccache_compress }}
        export CCACHE_COMPRESSLEVEL=${{ needs.build_prepare.outputs.ccache_compresslevel }}
        export CCACHE_MAXSIZE=${{ needs.build_prepare.outputs.ccache_maxsize }}
        export CCACHE_SLOPPINESS=${{ needs.build_prepare.outputs.ccache_sloppiness }}
        ccache -z

        source $TLD/${{ env.LLVM_BUILD_SCRIPT }}
        if [[ "${{ matrix.platform }}" == "freebsd" ]]; then
          export LDFLAGS="$LDFLAGS -Wl,-rpath=$TLD/${{ steps.platform.outputs.sysroot_dir }}/usr/local/lib/gcc${{ env.GCC_VERSION }}"
        fi

        # Grab this so that Pkg-Config can find what it needs for qt5 to build properly
        export PKG_CONFIG_PATH=`pkg-config --variable pc_path pkg-config`

        mkdir -pv $TLD/${{ env.BUILD_DIR }}

        cd $TLD/${{ env.SOURCE_DIR }}/build

        # Multi-stage process
        genie --os=${{ steps.platform.outputs.genie_os }} --platform=x64 --with-miniaudio-only cmake

        ln -sv $TLD/${{ env.BUILD_DIR }} build

        cmake ${{ needs.build_prepare.outputs.cmake_build_generator }} \
          ${{ needs.build_prepare.outputs.ccache_cmake_build_cflags }} \
          ${{ needs.build_prepare.outputs.ccache_cmake_build_cxxflags }} \
          ${{ needs.build_prepare.outputs.cmake_build_release }} \
          -DCMAKE_INSTALL_PREFIX=$TLD/${{ steps.define.outputs.prefix_dir }} \
          ${{ needs.build_prepare.outputs.cmake_build_static }} \
          -B build \
          -S cmake \
          ${{ needs.build_prepare.outputs.cmake_build_c_flags }} \
          ${{ needs.build_prepare.outputs.cmake_build_cxx_flags }} \
          ${{ needs.build_prepare.outputs.cmake_build_c_linker }} \
          ${{ needs.build_prepare.outputs.cmake_build_cxx_linker }} \
          -DCMAKE_SYSTEM_NAME=${{ steps.platform.outputs.platform_name }} \
          -DCMAKE_SYSTEM_VERSION=${{ steps.platform.outputs.system_version }} \
          -DCMAKE_SYSROOT=${{ steps.platform.outputs.sysroot_dir }}

        cmake --build build --parallel $(nproc)
        cmake --install build

        ccache -s

        cd $TLD

    - name: Build Static bgfx
      id: bgfx
      if: |
        needs.build_prepare.outputs.complete != 'true' &&
        steps.load.outputs.cache-hit != 'true'
      env:
        BUILD_DIR: "${{ steps.define.outputs.build_dir }}/bgfx"
        SOURCE_DIR: "${{ steps.define.outputs.source_dir }}/bgfx"
      shell: bash
      run: |
        export TLD=$GITHUB_WORKSPACE

        export CCACHE_DIR=$TLD/${{ steps.define.outputs.ccache_dir }}
        export CCACHE_COMPRESS=${{ needs.build_prepare.outputs.ccache_compress }}
        export CCACHE_COMPRESSLEVEL=${{ needs.build_prepare.outputs.ccache_compresslevel }}
        export CCACHE_MAXSIZE=${{ needs.build_prepare.outputs.ccache_maxsize }}
        export CCACHE_SLOPPINESS=${{ needs.build_prepare.outputs.ccache_sloppiness }}
        ccache -z

        source $TLD/${{ env.LLVM_BUILD_SCRIPT }}
        if [[ "${{ matrix.platform }}" == "freebsd" ]]; then
          export LDFLAGS="$LDFLAGS -Wl,-rpath=$TLD/${{ steps.platform.outputs.sysroot_dir }}/usr/local/lib/gcc${{ env.GCC_VERSION }}"
        fi

        # Grab this so that Pkg-Config can find what it needs for qt5 to build properly
        export PKG_CONFIG_PATH=`pkg-config --variable pc_path pkg-config`

        cd $TLD/${{ env.SOURCE_DIR }}/../bx
        patch -p1 -i $TLD/cross/patches/freebsd/Fixes-FreeBSD-Build.patch

        cd $TLD/${{ env.SOURCE_DIR }}

        # Hacked in build system
        genie --os=linux --platform=x64 --gcc=linux-clang --with-tools cmake

        ln -sv .build/projects/cmake build

        cmake ${{ needs.build_prepare.outputs.cmake_build_generator }} \
          ${{ needs.build_prepare.outputs.ccache_cmake_build_cflags }} \
          ${{ needs.build_prepare.outputs.ccache_cmake_build_cxxflags }} \
          ${{ needs.build_prepare.outputs.cmake_build_release }} \
          -DCMAKE_INSTALL_PREFIX=$TLD/${{ steps.define.outputs.prefix_dir }} \
          ${{ needs.build_prepare.outputs.cmake_build_static }} \
          -B build \
          -S . \
          ${{ needs.build_prepare.outputs.cmake_build_c_flags }} \
          ${{ needs.build_prepare.outputs.cmake_build_cxx_flags }} \
          ${{ needs.build_prepare.outputs.cmake_build_c_linker }} \
          ${{ needs.build_prepare.outputs.cmake_build_cxx_linker }} \
          -DCMAKE_SYSTEM_NAME=${{ steps.platform.outputs.platform_name }} \
          -DCMAKE_SYSTEM_VERSION=${{ steps.platform.outputs.system_version }} \
          -DCMAKE_SYSROOT=${{ steps.platform.outputs.sysroot_dir }}

        cmake --build build --parallel $(nproc)
        cmake --install build

        ccache -s

        cd $TLD

    - name: Cache ${{ matrix.source }} ${{ matrix.build }} Build
      if: |
        needs.build_prepare.outputs.complete != 'true' &&
        steps.load.outputs.cache-hit != true
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ steps.define.outputs.prefix_dir }}
        key: |
          ${{ steps.define.outputs.prefix_key }}

    - name: Cache ${{ matrix.source }} ${{ matrix.build }} ccache
      if: |
        needs.build_prepare.outputs.complete != 'true' &&
        steps.load.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          ${{ steps.define.outputs.ccache_dir }}
        key: |
          ${{ steps.define.outptus.ccache_key }}
